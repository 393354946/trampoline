#---------------------------------------------------------------------------*
#
#  @file arxml_parser.galgas
#
#  @section desc File description
#
#  Parser for arxml.
#
#  @section copyright Copyright
#
#  Goil OIL compiler, part of Trampoline RTOS
#
#  Trampoline is copyright (c) CNRS, University of Nantes,
#  Ecole Centrale de Nantes
#  Trampoline is protected by the French intellectual property law.
#
#  This software is distributed under the GNU Public Licence V2.
#  Check the LICENSE file in the root directory of Trampoline
#
#  $Date$
#  $Rev$
#  $Author$
#  $URL$
#
#---------------------------------------------------------------------------*

syntax arxml_parser (arxml_scanner) {

#----------------------------------------------------------------------------*

rule <arxml_start_symbol>
  !@arxmlNode     rootNode
  ?let @bool      includeComments
  ?let @bool      doNotCondenseWhiteSpaces
{
  @string s = .retrieveAndResetTemplateString
  if [s length] > 0 then
    error .here : "No character is allowed before XML header"
  end
#--- XML header
  $<?$
  $name$ ?let @lstring name
  
  @arxmlAttributeMap attributes = .emptyMap
  repeat
  while 
    $name$ ?let @lstring attributeName
    $=$
    $value$ ?let @lstring attributeValue
    [!?attributes insertKey !attributeName !attributeValue]
  end
  $?>$
#--- Element list
  @arxmlNodeList nodes = .emptyList
  <element_list>
    !?nodes
    !includeComments
    !doNotCondenseWhiteSpaces
    
  rootNode = @arxmlElementNode.new {
    !name
    !attributes
    !nodes
  }
}

#----------------------------------------------------------------------------*

rule <element_list>
  ?!@arxmlNodeList nodes
  ?let @bool       includeComments
  ?let @bool       doNotCondenseWhiteSpaces
{
  repeat
  while

    addText ( !?nodes !doNotCondenseWhiteSpaces )
    
    <element>
      !?nodes
      !includeComments
      !doNotCondenseWhiteSpaces
    
  end 
}

#----------------------------------------------------------------------------*

rule <element>
  ?!@arxmlNodeList  nodes
  ?let @bool        includeComments
  ?let @bool unused doNotCondenseWhiteSpaces
{
  $comment$ ?let @lstring commentString
  if includeComments then
    nodes += !@arxmlCommentNode.new { !commentString }
  end
}

#----------------------------------------------------------------------------*

rule <element>
  ?!@arxmlNodeList nodes
  ?let @bool       includeComments
  ?let @bool       doNotCondenseWhiteSpaces
{
  $<$
  $name$ ?let @lstring name
  @arxmlAttributeMap attributeMap = .emptyMap
  repeat
  while 
    $name$ ?let @lstring attributeName
    $=$
    $value$ ?let @lstring attributeValue
    [!?attributeMap insertKey !attributeName !attributeValue]
  end

  @arxmlNodeList nodeList  = .emptyList
  select
    $/>$
  or
    $>$
    <element_list>
      !?nodeList
      !includeComments
      !doNotCondenseWhiteSpaces

    addText ( !?nodeList !doNotCondenseWhiteSpaces )

    $</$ ;
    $name$ ?let @lstring closingName
    if [closingName string] != [name string] then
      error closingName : "incorrect closing tag </"
                          + closingName + "> instead of </" + name + ">"
    end
    $>$
  end
    
  nodes += !@arxmlElementNode.new {
    !name
    !attributeMap
    !nodeList
  }
}

#----------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------*

proc addText
  ?!@arxmlNodeList nodes
  ?let @bool       doNotCondenseWhiteSpaces
{
  @string s = .retrieveAndResetTemplateString
  @string trimmedString = [s stringByTrimmingWhiteSpaces]
  if [trimmedString length] > 0 then
    @lstring ls
    if doNotCondenseWhiteSpaces then
      ls = .new { !s !.here }
    else
      ls = .new { !trimmedString !.here }
    end
    
    nodes += !@arxmlTextNode.new { !ls }
  end
}

