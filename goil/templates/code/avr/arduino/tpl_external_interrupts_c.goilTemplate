/**
 * @file % !FILENAME %
 *
 * @section desc File description
 *
 * External interrupts init and acknowledge functions for % !CPUNAME %
 * Automatically generated by goil on % !TIMESTAMP %
 * from root OIL file % !OILFILENAME %
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 * Trampoline is copyright (c) LS2N 2005-2017
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the GNU Public Licence v2
 *
 */

#include "tpl_machine.h"
#include "Arduino.h"

%

#############
# TODO: la config doit être Ok.
# il ne reste "plus qu'à" générer le code pour les interruptions
# => avec la pull-up.
# rajouter le fichier dans la liste des fichiers à compiler.
# Et adapter pour le Mega2560 => pas les même broches/pull.
#############
#list to associate the pin to its EIC number.
#let pin2EicList := @(
#  @{ PIN:"PA0",  EICNUM:0},
#  @{ PIN:"PA1",  EICNUM:1},
#  @{ PIN:"PA2",  EICNUM:2},
#  @{ PIN:"PA3",  EICNUM:3},
#  @{ PIN:"PA4",  EICNUM:4},
#  @{ PIN:"PA5",  EICNUM:5},
#  @{ PIN:"PA6",  EICNUM:6},
#  @{ PIN:"PA7",  EICNUM:7},
#  #PIN8 with NMI
#  @{ PIN:"PA9",  EICNUM:9},
#  @{ PIN:"PA10", EICNUM:10},
#  @{ PIN:"PA11", EICNUM:11},
#  @{ PIN:"PA12", EICNUM:12},
#  @{ PIN:"PA13", EICNUM:13},
#  @{ PIN:"PA14", EICNUM:14},
#  @{ PIN:"PA15", EICNUM:15},
#  @{ PIN:"PA16", EICNUM:0},
#  @{ PIN:"PA17", EICNUM:1},
#  @{ PIN:"PA18", EICNUM:2},
#  @{ PIN:"PA19", EICNUM:3},
#  @{ PIN:"PA20", EICNUM:4},
#  @{ PIN:"PA21", EICNUM:5},
#  @{ PIN:"PA22", EICNUM:6},
#  @{ PIN:"PA23", EICNUM:7},
#  @{ PIN:"PA24", EICNUM:12},
#  @{ PIN:"PA25", EICNUM:13},
## no PA26
#  @{ PIN:"PA27", EICNUM:15},
#  @{ PIN:"PA28", EICNUM:8},
## no PA29
#  @{ PIN:"PA30", EICNUM:10},
#  @{ PIN:"PA31", EICNUM:11},
#  
#  @{ PIN:"PB0",  EICNUM:0},
#  @{ PIN:"PB1",  EICNUM:1},
#  @{ PIN:"PB2",  EICNUM:2},
#  @{ PIN:"PB3",  EICNUM:3},
#  @{ PIN:"PB4",  EICNUM:4},
#  @{ PIN:"PB5",  EICNUM:5},
#  @{ PIN:"PB6",  EICNUM:6},
#  @{ PIN:"PB7",  EICNUM:7},
#  @{ PIN:"PB8",  EICNUM:7},
#  @{ PIN:"PB9",  EICNUM:9},
#  @{ PIN:"PB10", EICNUM:10},
#  @{ PIN:"PB11", EICNUM:11},
#  @{ PIN:"PB12", EICNUM:12},
#  @{ PIN:"PB13", EICNUM:13},
#  @{ PIN:"PB14", EICNUM:14},
#  @{ PIN:"PB15", EICNUM:15},
#  @{ PIN:"PB16", EICNUM:0},
#  @{ PIN:"PB17", EICNUM:1},
#  #no PB18
#  #no PB19
#  #no PB20
#  #no PB21
#  @{ PIN:"PB22", EICNUM:6},
#  @{ PIN:"PB23", EICNUM:7},
#  #no PB24
#  #no PB25
#  #no PB26
#  #no PB27
#  #no PB28
#  #no PB29
#  @{ PIN:"PB30", EICNUM:14},
#  @{ PIN:"PB31", EICNUM:15}
#)
#
#let pin2Eic := mapof pin2EicList by PIN
#let pin2EicDone := @[ ]
%
/*
 * External Interrupts initialization for the AVR-Arduino Microcontroller
 *
 * Inits are done according to the source(s) pin(s) selected for an interrupt
 * vector corresponding to an or a set of interrupt(s) line(s)
 *
 */
#define OS_START_SEC_CODE
#include "tpl_memmap.h"

%
# look for EXTERNAL IRQ interrupt sources in COUNTERS and ISR
let ITOBJ := COUNTER | ISR

foreach obj in ITOBJ do
  if [obj::SOURCE subString: 0, 3] == "PIN" then #external interrupt
    if exists obj::SOURCE_S then
      let P:=obj::SOURCE_S
      let pinId := [obj::SOURCE subString: 3, 4]
      %extern void %!obj::SOURCE%_Handler();\n%
    end if #SOURCE structure
  end if #external interrupt
end foreach


%
FUNC(void, OS_CODE) tpl_init_external_interrupts()
{
%

## check TODO

#program the EXTERNAL interrupt pin
foreach obj in ITOBJ do
  if [obj::SOURCE subString: 0, 3] == "PIN" then #external interrupt
    if exists obj::SOURCE_S then
      let P:=obj::SOURCE_S
      let pinId := [obj::SOURCE subString: 3, 4]
      #pullup?
      if P::PULL == "UP" then 
          %	pinMode(%!pinId%, INPUT_PULLUP);\n%
      else
          %	pinMode(%!pinId%, INPUT);\n%
      end if
      #interrupt
      %	attachInterrupt(digitalPinToInterrupt(%!pinId%), %!obj::SOURCE%_Handler, %!P::MODE%);\n%
    end if #SOURCE structure
  end if #external interrupt
end foreach

%}\n%


%
#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"

/* End of file % !FILENAME % */

