/**
 * @file tpl_init_it_priority.c
 *
 * @section descr File description
 *
 * Initialize the interrupt priorities according the the priorities of the
 * ISR.
 *
 * Generated from application % !CPUNAME %
 * Automatically generated by goil on % !TIMESTAMP %
 * from root OIL file % !OILFILENAME %
 *
 * @section infos File informations
 *
 * $$Date$$
 * $$Rev$$
 * $$Author$$
 * $$URL$$
 */

#include "tpl_compiler.h"
#include "tpl_cortex_definitions.h"
#include "cmsis_wrapper.h"

#define OS_START_SEC_CODE
#include "tpl_memmap.h"

/*=============================================================================
 * Initialize the priorities in the NVIC according to the priorities defined
 * in the OIL file
 */
FUNC(void, OS_CODE) tpl_init_it_priority(void)
{%
foreach isr in ISRS1
before
%
  /*
   * Init of ISR category 1 priorities
   */
%
do
%

  /* Init the priority of % !isr::SOURCE % */
  NVIC_SetPriority(% !isr::SOURCE%_Number, % !isr::SOURCE %_Priority);%
end foreach
foreach isr in ISRS2
before
%
  /*
   * Init of ISR category 2 priorities
   */
%
do
%
  /* Init the priority of % !isr::SOURCE % */
  NVIC_SetPriority(% !isr::SOURCE%_Number, KERNEL_PRIO_UNSHIFTED);%
end foreach
%
}
%

#
# Compute a vector for interrupts number corresponding to ISR2
#
let ITSOURCES := [INTERRUPT mapBy: "NAME"]
let ISR2_vector := 0
foreach isr in ISRS2 do
   if exists ITSOURCES[isr::SOURCE]::SETPRIO_S::NUMBER then
     [!ISR2_vector setBitAtIndex:
       true,
       ITSOURCES[isr::SOURCE]::SETPRIO_S::NUMBER
     ]
   else
     error isr::SOURCE : "ISR category 2 may use external interrupts only"
   end if
end foreach
let lower32bitsMask := 1 << 32 - 1

%
/*=============================================================================
 * To disable the OS interrupts (aka ISR category 2), the corresponding ICER
 * are set
 */
FUNC(void, OS_CODE) tpl_disable_os_interrupts(void)
{%
let icer_index := 0
let vector := ISR2_vector
repeat ( [ISR2_vector numberOfBytes] / 4 + 1)
while vector != 0 do
  let register_content := vector & lower32bitsMask
  if register_content != 0 then
%
  NVIC->ICER[% !icer_index %] = % ![register_content hexString] %;%
  end if
  let vector >>= 32
  let icer_index += 1
end repeat
%
}

/*=============================================================================
 * To disable the OS interrupts (aka ISR category 2), the corresponding ISER
 * are set
 */
FUNC(void, OS_CODE) tpl_enable_os_interrupts(void)
{%
let icer_index := 0
let vector := ISR2_vector
repeat ( [ISR2_vector numberOfBytes] / 4 + 1)
while vector != 0 do
  let register_content := vector & lower32bitsMask
  if register_content != 0 then
%
  NVIC->ISER[% !icer_index %] = % ![register_content hexString] %;%
  end if
  let vector >>= 32
  let icer_index += 1
end repeat
%
}

#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"

/* End of file tpl_init_it_priority.c */
