/**
 * @file tpl_init_it_priority.c
 *
 * @section descr File description
 *
 * Initialize the interrupt priorities according the the priorities of the
 * ISR.
 *
 * Generated from application % !CPUNAME %
 * Automatically generated by goil on % !TIMESTAMP %
 * from root OIL file % !OILFILENAME %
 *
 * @section infos File informations
 *
 * $$Date$$
 * $$Rev$$
 * $$Author$$
 * $$URL$$
 */

#include "tpl_compiler.h"
#include "cmsis_wrapper.h"

%
#------------------------------------------------------------------------------*
# Sort the ISR1 according to their priority in descending order

sort ISRS1 by PRIORITY <

#------------------------------------------------------------------------------*
# Compute their new priority 
# 15 is used for all ISR2 handlers
# 14 is used for the SVC and the SysTick
# 1-13 are used for the ISR1
# 0 is used for the SVC when interrupts are disabled

let current_priority := 14
let prioritizedISR1 := @()
let previous_priority := -1
foreach isr in ISRS1 do
  if isr::PRIORITY != previous_priority then
    let current_priority -= 1
    let previous_priority := isr::PRIORITY
  end if
  let isr::PRIORITY := current_priority
  let prioritizedISR1 += isr
end foreach

if current_priority < 1 then
  error EOF : "ISRs category 1 use more than 13 priority levels"
end if

let ITmap := [INTERRUPT mapBy: "NAME"]

%
FUNC(void, OS_CODE) tpl_init_it_priority(void)
{%
foreach isr in prioritizedISR1 do
  if exists ITmap[isr::SOURCE] then
    let interrupt := ITmap[isr::SOURCE]
    if interrupt::SETPRIO == true then
%
  /* Init the priority of % !interrupt::NAME % / % !interrupt::VECTOR_TYPE_S::NAME % */
  NVIC_SetPriority(% !interrupt::SETPRIO_S::NUMBER %, % !isr::PRIORITY %);%
    else
      error isr::SOURCE : "The priority of this interrupt source is not settable"
    end if
  end if
end foreach
%
}

/* End of file tpl_init_it_priority.c */
