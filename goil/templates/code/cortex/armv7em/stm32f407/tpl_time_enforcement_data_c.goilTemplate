%

import "serviceid"

%#include "tpl_app_define.h"
#include "tpl_compiler.h"
#include "tpl_os_std_types.h"
#include "tpl_os_time_model.h"

#define OS_START_SEC_VAR_NOINIT_32BIT
#include "tpl_memmap.h"

VAR(uint32, OS_VAR) tpl_time_enforcement_timers[TASK_COUNT];

VAR(uint32, OS_VAR) tpl_time_enforcement_timers_init[TASK_COUNT];

#define OS_STOP_SEC_VAR_NOINIT_32BIT
#include "tpl_memmap.h"

#define OS_START_SEC_CONST_32BIT
#include "tpl_memmap.h"

#define TE_STATE_COUNT  10

%
let api_list := serviceid(APIUSED)

display api_list

foreach task in TASKS do
  loop state from 0 to 9 do
%
extern CONSTP2CONST(tpl_te_transition, OS_CONST, OS_APPL_CONST) tpl_te_transitions_of_% !task::NAME %_from_state_% !state %;%
  end loop
end foreach

foreach task in TASKS do
%
CONSTP2CONST(tpl_te_transition, OS_CONST, OS_APPL_CONST) tpl_transitions_of_task_% !task::NAME %[TE_STATE_COUNT] = {
%
  loop state from 0 to 9 do
%
  tpl_te_transitions_of_% !task::NAME %_from_state_% !state 
  between %,
%  
  end loop
%  
};
%
end foreach
%

CONSTP2CONST(tpl_te_transition, OS_CONST, OS_APPL_CONST) tpl_te_models[TASK_COUNT] = {
%
foreach task in TASKS 
do
%  tpl_transitions_of_task_% !task::NAME 
between %
,%
end foreach
%
};

#define OS_STOP_SEC_CONST_32BIT
#include "tpl_memmap.h"

